import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:moochat/core/helpers/logger_debug.dart';

/// üéôÔ∏è Voice Recording Service
/// ‡∏Ñ‡∏•‡∏≤‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠ permission ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
class VoiceRecordingService {
  static final VoiceRecordingService _instance =
      VoiceRecordingService._internal();
  factory VoiceRecordingService() => _instance;
  VoiceRecordingService._internal();

  // üì± FlutterSoundRecorder instance ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  final FlutterSoundRecorder _audioRecorder = FlutterSoundRecorder();

  // üóÇÔ∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  String? _currentRecordingPath;

  // ‚è±Ô∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  DateTime? _recordingStartTime;

  // üéõÔ∏è ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  bool _isRecording = false;

  // üîß ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ initialized ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  bool _isInitialized = false;

  /// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isRecording => _isRecording;

  /// ‚è∞ ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  Duration? get recordingDuration {
    if (_recordingStartTime == null) return null;
    return DateTime.now().difference(_recordingStartTime!);
  }

  /// üîê ‡∏Ç‡∏≠ permission ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ microphone
  /// ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  Future<bool> requestPermission() async {
    try {
      LoggerDebug.logger.i('üéôÔ∏è Requesting microphone permission...');

      // ‡∏Ç‡∏≠ permission ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö microphone
      PermissionStatus status = await Permission.microphone.request();

      if (status == PermissionStatus.granted) {
        LoggerDebug.logger.i('‚úÖ Microphone permission granted');
        return true;
      } else {
        LoggerDebug.logger.w('‚ùå Microphone permission denied: $status');
        return false;
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error requesting microphone permission: $e');
      return false;
    }
  }

  /// üéµ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  /// return: ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞ return path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∞ return null
  Future<String?> startRecording() async {
    try {
      LoggerDebug.logger.i('üéôÔ∏è Starting voice recording...');

      // Initialize ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢
      if (!_isInitialized) {
        await _audioRecorder.openRecorder();
        _isInitialized = true;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ permission ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      bool hasPermission = await Permission.microphone.isGranted;
      if (!hasPermission) {
        hasPermission = await requestPermission();
        if (!hasPermission) {
          LoggerDebug.logger.e('‚ùå Cannot record without microphone permission');
          return null;
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (_isRecording) {
        LoggerDebug.logger.w(
          '‚ö†Ô∏è Already recording, stopping current recording first',
        );
        await stopRecording();
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String voiceDir = '${appDocDir.path}/voices';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      final Directory voiceDirObj = Directory(voiceDir);
      if (!await voiceDirObj.exists()) {
        await voiceDirObj.create(recursive: true);
        LoggerDebug.logger.i('üìÅ Created voice directory: $voiceDir');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ timestamp
      final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();
      _currentRecordingPath = '$voiceDir/voice_$timestamp.aac';

      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢ flutter_sound
      await _audioRecorder.startRecorder(
        toFile: _currentRecordingPath,
        codec: Codec.aacMP4, // ‡πÉ‡∏ä‡πâ AAC codec
        bitRate: 128000, // 128 kbps
        sampleRate: 44100, // 44.1 kHz
      );

      _isRecording = true;
      _recordingStartTime = DateTime.now();

      LoggerDebug.logger.i(
        'üé§ Recording started successfully: $_currentRecordingPath',
      );
      return _currentRecordingPath;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error starting recording: $e');
      _isRecording = false;
      _recordingStartTime = null;
      _currentRecordingPath = null;
      return null;
    }
  }

  /// ‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  /// return: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  Future<String?> stopRecording() async {
    try {
      LoggerDebug.logger.i('‚èπÔ∏è Stopping voice recording...');

      if (!_isRecording) {
        LoggerDebug.logger.w('‚ö†Ô∏è Not currently recording');
        return null;
      }

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      final String? path = await _audioRecorder.stopRecorder();

      _isRecording = false;
      final Duration? duration = recordingDuration;
      _recordingStartTime = null;

      if (path != null) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î
        final File file = File(path);
        if (await file.exists()) {
          final int fileSize = await file.length();
          LoggerDebug.logger.i(
            '‚úÖ Recording saved successfully: $path (${fileSize} bytes, ${duration?.inSeconds}s)',
          );

          // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
          final String recordedPath = _currentRecordingPath!;
          _currentRecordingPath = null;

          return recordedPath;
        } else {
          LoggerDebug.logger.e('üí• Recorded file does not exist: $path');
        }
      } else {
        LoggerDebug.logger.e('üí• Recording path is null');
      }

      _currentRecordingPath = null;
      return null;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error stopping recording: $e');
      _isRecording = false;
      _recordingStartTime = null;
      _currentRecordingPath = null;
      return null;
    }
  }

  /// üóëÔ∏è ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
  Future<void> cancelRecording() async {
    try {
      LoggerDebug.logger.i('‚ùå Cancelling voice recording...');

      if (_isRecording) {
        await _audioRecorder.stopRecorder();
        _isRecording = false;
        _recordingStartTime = null;
      }

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (_currentRecordingPath != null) {
        final File file = File(_currentRecordingPath!);
        if (await file.exists()) {
          await file.delete();
          LoggerDebug.logger.i(
            'üóëÔ∏è Deleted cancelled recording: $_currentRecordingPath',
          );
        }
        _currentRecordingPath = null;
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error cancelling recording: $e');
      _isRecording = false;
      _recordingStartTime = null;
      _currentRecordingPath = null;
    }
  }

  /// üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î resources
  Future<void> dispose() async {
    try {
      if (_isRecording) {
        await cancelRecording();
      }
      if (_isInitialized) {
        await _audioRecorder.closeRecorder();
        _isInitialized = false;
      }
      LoggerDebug.logger.i('üßπ Voice recording service disposed');
    } catch (e) {
      LoggerDebug.logger.e('üí• Error disposing voice recording service: $e');
    }
  }

  /// üìä ‡πÑ‡∏î‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö human-readable
  static String formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  /// ‚è±Ô∏è ‡πÑ‡∏î‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö MM:SS
  static String formatDuration(Duration duration) {
    final minutes = duration.inMinutes;
    final seconds = duration.inSeconds % 60;
    return '${minutes.toString().padLeft(2, '0')}:${seconds.toString().padLeft(2, '0')}';
  }

  /// üß™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ device ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  Future<bool> isRecordingAvailable() async {
    try {
      return await Permission.microphone.isGranted ||
          await Permission.microphone.request() == PermissionStatus.granted;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error checking recording availability: $e');
      return false;
    }
  }

  /// üìÅ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
  Future<void> cleanupOldVoiceFiles() async {
    try {
      final Directory appDocDir = await getApplicationDocumentsDirectory();
      final String voiceDir = '${appDocDir.path}/voices';
      final Directory voiceDirObj = Directory(voiceDir);

      if (await voiceDirObj.exists()) {
        final List<FileSystemEntity> files = voiceDirObj.listSync();

        // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡πÅ‡∏ï‡πà‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° modified time
        final List<File> voiceFiles =
            files
                .whereType<File>()
                .where((file) => file.path.endsWith('.m4a'))
                .toList()
              ..sort(
                (a, b) => b.lastModifiedSync().compareTo(a.lastModifiedSync()),
              );

        // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (voiceFiles.length > 50) {
          final filesToDelete = voiceFiles.skip(50);
          for (final file in filesToDelete) {
            await file.delete();
          }
          LoggerDebug.logger.i(
            'üßπ Cleaned up ${filesToDelete.length} old voice files',
          );
        }
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error cleaning up old voice files: $e');
    }
  }
}
