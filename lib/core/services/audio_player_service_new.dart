import 'dart:typed_data';
import 'dart:io';
import 'dart:convert';
import 'package:just_audio/just_audio.dart';
import 'package:path_provider/path_provider.dart';
import '../helpers/logger_debug.dart';

/// üîä Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡πÉ‡∏ä‡πâ just_audio)
class AudioPlayerService {
  static final AudioPlayerService _instance = AudioPlayerService._internal();
  factory AudioPlayerService() => _instance;
  AudioPlayerService._internal();

  // Just Audio Player instance
  final AudioPlayer _audioPlayer = AudioPlayer();
  bool _isInitialized = false;
  bool _isPlaying = false;
  String? _currentPlayingFile;

  /// üéµ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô service
  Future<void> initialize() async {
    try {
      if (!_isInitialized) {
        // just_audio ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á initialize ‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏Ñ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á instance
        _isInitialized = true;
        LoggerDebug.logger.i('üîä Audio player initialized successfully');
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error initializing audio player: $e');
    }
  }

  /// üóëÔ∏è ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ
  Future<void> dispose() async {
    try {
      if (_isPlaying) {
        await stopPlayback();
      }
      await _audioPlayer.dispose();
      _isInitialized = false;
      LoggerDebug.logger.i('üîä Audio player disposed');
    } catch (e) {
      LoggerDebug.logger.e('üí• Error disposing audio player: $e');
    }
  }

  /// üéµ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å base64 string
  /// base64Audio: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏ô format base64
  /// return: true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ, false ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  Future<bool> playFromBase64(String base64Audio) async {
    try {
      LoggerDebug.logger.i('üéµ Starting to play audio from base64...');

      // Initialize ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢
      if (!_isInitialized) {
        await initialize();
      }

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (_isPlaying) {
        await stopPlayback();
      }

      // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô bytes
      final Uint8List audioBytes = base64Decode(base64Audio);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô
      final Directory tempDir = await getTemporaryDirectory();
      final String tempPath =
          '${tempDir.path}/temp_audio_${DateTime.now().millisecondsSinceEpoch}.aac';
      final File tempFile = File(tempPath);

      // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
      await tempFile.writeAsBytes(audioBytes);
      LoggerDebug.logger.i('üéµ Temporary audio file created: $tempPath');

      // Set audio source ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô
      await _audioPlayer.setFilePath(tempPath);

      // Listen for completion
      _audioPlayer.playerStateStream.listen((state) {
        if (state.processingState == ProcessingState.completed) {
          LoggerDebug.logger.i('üéµ Audio playback finished');
          _isPlaying = false;
          _currentPlayingFile = null;

          // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
          _deleteTempFile(tempPath);
        }
      });

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
      await _audioPlayer.play();

      _isPlaying = true;
      _currentPlayingFile = tempPath;

      LoggerDebug.logger.i('üéµ Audio playback started successfully');
      return true;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error playing audio from base64: $e');
      return false;
    }
  }

  /// üéµ ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå path
  /// filePath: path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  /// return: true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ, false ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
  Future<bool> playFromFile(String filePath) async {
    try {
      LoggerDebug.logger.i('üéµ Starting to play audio from file: $filePath');

      // Initialize ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢
      if (!_isInitialized) {
        await initialize();
      }

      // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (_isPlaying) {
        await stopPlayback();
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      if (!await File(filePath).exists()) {
        LoggerDebug.logger.e('‚ùå Audio file not found: $filePath');
        return false;
      }

      // Set audio source ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡πà‡∏ô
      await _audioPlayer.setFilePath(filePath);

      // Listen for completion
      _audioPlayer.playerStateStream.listen((state) {
        if (state.processingState == ProcessingState.completed) {
          LoggerDebug.logger.i('üéµ Audio playback finished');
          _isPlaying = false;
          _currentPlayingFile = null;
        }
      });

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
      await _audioPlayer.play();

      _isPlaying = true;
      _currentPlayingFile = filePath;

      LoggerDebug.logger.i('üéµ Audio playback started successfully');
      return true;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error playing audio from file: $e');
      return false;
    }
  }

  /// ‚è∏Ô∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  Future<void> stopPlayback() async {
    try {
      if (_isPlaying) {
        await _audioPlayer.stop();
        LoggerDebug.logger.i('‚è∏Ô∏è Audio playback stopped');

        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if (_currentPlayingFile != null &&
            _currentPlayingFile!.contains('temp_audio_')) {
          _deleteTempFile(_currentPlayingFile!);
        }
      }
      _isPlaying = false;
      _currentPlayingFile = null;
    } catch (e) {
      LoggerDebug.logger.e('üí• Error stopping audio playback: $e');
    }
  }

  /// ‚è∏Ô∏è Pause/Resume ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  Future<void> pauseResumePlayback() async {
    try {
      if (_audioPlayer.playing) {
        await _audioPlayer.pause();
        LoggerDebug.logger.i('‚è∏Ô∏è Audio playback paused');
      } else {
        await _audioPlayer.play();
        LoggerDebug.logger.i('‚ñ∂Ô∏è Audio playback resumed');
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error pausing/resuming audio: $e');
    }
  }

  /// üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool get isPlaying => _audioPlayer.playing && _isPlaying;

  /// üîç ‡πÑ‡∏î‡πâ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô
  String? get currentPlayingFile => _currentPlayingFile;

  /// üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  Future<void> _deleteTempFile(String filePath) async {
    try {
      final File file = File(filePath);
      if (await file.exists()) {
        await file.delete();
        LoggerDebug.logger.i('üóëÔ∏è Temporary file deleted: $filePath');
      }
    } catch (e) {
      LoggerDebug.logger.e('üí• Error deleting temporary file: $e');
    }
  }

  /// üìä ‡πÑ‡∏î‡πâ duration ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  Duration? get currentDuration => _audioPlayer.duration;

  /// üìä ‡πÑ‡∏î‡πâ position ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  Duration? get currentPosition => _audioPlayer.position;
}
